public class Solution {
 public static List<List<Integer>> permuteUnique(int[] num) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        Stack<Integer> perm = new Stack<Integer>();
        
        Arrays.sort(num);
        permute(0,num,perm,result);
        
        return result;
    }
    public static void permute(int index, int [] num, Stack<Integer> perm, List<List<Integer>> result) {
    	int len = num.length;
    	if (index == len) {
    		List<Integer> tmp = new ArrayList<Integer>();
    		for (int i = 0; i < len; i++) {
    			tmp.add(perm.elementAt(i));
    		}
    		result.add(tmp);
    	} else {
    		for (int i = index; i < len; i++) {
    			if ((i>index)&&(num[i] == num[index])) {
    				continue;
    			} else {
    				int tmp = num[i];
    				num[i] = num[index];
    				num[index] = tmp;
    			}
    			perm.push(num[index]);
    			permute(index+1,num,perm,result);
    			perm.pop();
    			
    			
    		}
    		Arrays.sort(num, index, num.length);
    	}
    	
    }
}
